#!/bin/sh
# vim: set tabstop=4:

path_installdir="/usr/libexec/nomad"
path_nomadcfg="/nomad.cfg"
selection="/tmp/selection.$$"
path_xorg_input_tmpl=${path_installdir}/input-keyboard.conf.tmpl
path_xorg_input=/usr/local/etc/X11/xorg.conf.d/input-keyboard.conf
fragsize=4096
blksize=$(echo "${fragsize} * 8" | bc)
gptroot="nomadroot"
gpthome="nomadhome"

mainmenu() {
	local msg

	msg="\n\nBefore you can use NomadBSD, there are some things"
	msg="${msg} to be set up."
	msg="${msg} This menu will guide you through the setup process.\n\n"
	msg="${msg}Ready to proceed?\n"

	dialog --clear --title "SET UP NOMADBSD" --yesno "${msg}" 12 60
	[ $? -ne 0 ] && exitmenu "Bummer :("
}

exitmenu() {
	local ret opt

	ret="/tmp/exitmenu.ret"
	while [ true ]; do
		dialog --title "LEAVE" --radiolist "$1" 15 60 3 \
		"Reboot" "Reboot system" off \
		"Shutdown" "Shutdown system" on \
		"Exit" "Exit setup" off 2>${ret}
		[ $? -ne 0 ] && continue
		opt=`cat ${ret}`
		rm -f ${ret}

		case ${opt} in
		Shutdown)
			shutdown -p now;;
		Exit)
			exit 1;;
		Reboot)
			shutdown -r now;;
		esac
	done
}

errandout() {
	local msg

	msg=$1
	msg="${msg}\n\nI'm afraid I can't continue. Sorry for the inconvenience."
	msg="${msg}\n\nAll I can offer is:\n"
	exitmenu "${msg}"
}

summary() {
	local text

	text="\n"
	text="${text}Language:     $lang\n"
	text="${text}Shell:        $shell\n"
	text="${text}Xkbdmodel:    $xkbdmodel\n"
	text="${text}Xkbdlayout:   $xkbdlayout\n"
	text="${text}Timezone:     `cat /var/db/zoneinfo`\n"

	dialog --no-items --no-cancel --title "SUMMARY"   \
	       --menu "$text" -1 -1 2 "I'm happy with it" \
	       "I want to change something"
}

change() {
	local text

	text=""
	text="${text}Language     $lang "
	text="${text}Shell        $shell "
	text="${text}Xkbdmodel    $xkbdmodel "
	text="${text}Xkbdlayout   $xkbdlayout "
	text="${text}Software     Software-settings "
	text="${text}Timezone     `cat /var/db/zoneinfo`"

	dialog --title "CHANGE SETTINGS" --ok-label "Change" \
	       --menu "" -1 60 6 $text
}

setlang() {
	list=$(locale -a | grep '.UTF-8'| sort -n | uniq | cut -d. -f 1)
	while [ true ]; do
		dialog --clear --title "LANGUAGE" --no-items   \
		       --menu "\nPlease select your language." \
		       -1 -1 10 $list 2>${selection}
		ret=$?; lang=$(cat $selection)
		[ $ret -eq 0 -a ! -z "$lang" ] && break
	done
	rm -f $selection
	echo "lang=$lang" >> $path_nomadcfg
}

setshell() {
	local opts

	for i in `cat /etc/shells | sed '/^\#/d; /^$/d'`; do
		if (echo $i | grep -q '/zsh$'); then
			opts="${opts}$i on ";
		else
			opts="${opts}$i off ";
		fi
	done
	while [ true ]; do
		dialog --clear --title "SHELL" --no-items \
		       --radiolist "\nPlease select your prefered shell." \
		       -1 60 4 $opts 2>${selection}
		ret=$?; shell=$(cat $selection)
		[ $ret -eq 0 -a ! -z "$shell" ] && break
	done
	rm -f $selection
	echo "shell=$shell" >> $path_nomadcfg
}

getlist() {
	baselst="/usr/local/share/X11/xkb/rules/base.lst"

	re=$(echo -n '^! '$1)
	cat $baselst | awk -v re=$re -F " " '{
		if ($0 ~ re) {
			in_model = 1;
		} else if (/^\! /) {
			in_model = 0;
		} else if (/^ /) {
			if (in_model) {
				printf("%s\t", $1);
				for (i = 2; i <= NF; i++) {
					printf("%s", $i);
					if (i < NF)
						printf(" ");
				}
				printf("\n");
			}
		}
	}'
}

setxkbdmodel() {
	local IFS=$(printf "\t");

	models=$(getlist "model" | tr '\n' '\t')
	while [ true ]; do
		dialog --clear --title "KEYBOARD MODEL" \
		       --menu "\nPlease select your keyboard model.\n" \
		       -1 60 8 $models 2>${selection}
		ret=$?; model=$(cat ${selection})
		[ $ret -eq 0 ] && break
	done
	rm -f $selection
	echo "xkbdmodel=$model" >> $path_nomadcfg
}

setxkbdlayout() {
	local IFS=$(printf "\t");

	layouts=$(getlist "layout" | sort -n | tr '\n' '\t')
	while [ true ]; do
		dialog --clear --title "KEYBOARD LAYOUT" \
		       --menu "\nPlease select your keyboard layout.\n" \
	               -1 60 8 $layouts 2>${selection}
		ret=$?; layout=$(cat ${selection})
		[ $ret -eq 0 ] && break
	done
	rm -f $selection
	echo "xkbdlayout=$layout" >> $path_nomadcfg
}

mkgeli() {
	local pwdfile cmdret

	cmdret="/tmp/mkgeli_cmds.ret"
	pwdfile="/tmp/geli.pwd"
	dd if=/dev/random of=/root/${gpthome}.key bs=64 count=1 > /dev/null 2>&1
	while [ true ]; do
		dialog --insecure --passwordform \
			"Enter a password for geli volume" \
			12 60 4 "Password" 1 0 "" 2 1 50 0 \
			"Repeat password" 3 0 "" 4 1 50 0 2>${pwdfile}
		if [ $? -ne 0 ]; then
			dialog --title "GIVE UP?" --yesno "Exit setup?" 6 60
			[ $? -eq 0 ] && exitmenu "Please choose:"
			continue
		fi
		p1=`head -1 ${pwdfile}`	
		p2=`tail -1 ${pwdfile}`
		rm -f ${pwdfile}
		if [ "$p1" != "$p2" ]; then
			dialog --title ERROR --msgbox \
				"\nPasswords do not match." 6 40
		elif [ -z "$p1" ]; then
			dialog --title ERROR --msgbox \
				"\nPassword must not be empty." 6 40
		else
			break
		fi
	done
	(echo "$p1" | geli init -s 4096 -K /root/${gpthome}.key -J - \
		/dev/gpt/${gpthome} 2>&1; echo $?>${cmdret}) | dialog --progressbox \
		20 75
	if [ "`cat ${cmdret}`" -ne 0 ]; then
		errandout "Error: Failed to init geli volume."
	fi
	(echo "$p1" | geli attach -k /root/${gpthome}.key -j - \
		/dev/gpt/${gpthome} 2>&1; echo $?>${cmdret}) | dialog --progressbox \
		20 75
	if [ "`cat ${cmdret}`" -ne 0 ]; then
		errandout "Error: Failed to attach geli volume."
	fi
	(newfs -E -U -O 1 -o time -b ${blksize} -f ${fragsize} \
		-m 8 /dev/gpt/${gpthome}.eli 2>&1; echo $?>${cmdret}) | \
		dialog --progressbox 20 75
	if [ "`cat ${cmdret}`" -ne 0 ]; then
		errandout "Error: Failed to create filesystem."
	fi
	rm -f ${cmdret}
	mkdir /private > /dev/null 2>&1 || \
		errandout "Error: Failed to create /private"
	if ! mount /dev/gpt/${gpthome}.eli /private; then
		errandout "Error: Failed to mount filesystem."
	fi
	mkdir /private/home || errandout "Error: Failed to create /private/home"
	mkdir /private/etc  || errandout "Error: Failed to create /private/etc"
	mkdir /private/home/nomad || \
		errandout "Error: Failed to create /private/home/nomad"
	unlink /home >/dev/null 2>&1
	ln -s /private/home /home || \
		errandout "Error: Failed to create symlink /home -> /private/home"
	chown nomad:nomad /home/nomad
	# Protect plain text passwords from ppp.conf and wpa_supplicant.conf
	mv /etc/ppp /private/etc/
	mv /etc/wpa_supplicant.conf /private/etc >/dev/null 2>&1
	touch /private/etc/wpa_supplicant.conf
	(cd /etc && ln -sf /private/etc/ppp; ln -sf /private/etc/wpa_supplicant.conf)
	sysrc geli_devices="gpt/${gpthome}" > /dev/null 2>&1
	sysrc geli_gpt_${gpthome}_flags="-k /root/${gpthome}.key" > /dev/null 2>&1
	printf "/dev/gpt/${gpthome}.eli\t/private\t\t\tufs\trw,noatime\t1 1\n" >> \
		/etc/fstab
}

mkhome() {
	local cmdret home

	cmdret="/tmp/mkhome_newfs.ret"
	rootdev=`glabel status | grep ${gptroot} | awk -F" " '{ print $3 }'`
	if [ -z "${rootdev}" ]; then
		errandout "Error: Failed find root device."
	fi
	dev=`echo ${rootdev} | sed -E 's/(.*)p[0-9]/\1/'`

	if (glabel status | grep "gpt/${gpthome}"); then
		errandout "Error: gpt/${gpthome} already exists."
	fi
	gpart recover ${dev}
	gpart set -a lenovofix ${dev}
	if ! gpart add -t freebsd-ufs -l ${gpthome} ${dev}; then
		errandout "Error: Couldn't create partition."
	fi
	msg="Would you like /home to be encrypted using geli?"
	dialog --yesno "$msg" 6 60
	ret=$?
	if [ $ret -eq 0 ]; then
		mkgeli
	else
		(newfs -E -U -O 1 -o time -b ${blksize} -f ${fragsize} \
			-m 8 /dev/gpt/${gpthome} 2>&1; echo $?>${cmdret}) | \
			dialog --progressbox 20 75
		if [ "`cat ${cmdret}`" -ne 0 ]; then
			errandout "Error: Couldn't create partition."
		fi
		rm -f ${cmdret}
		mkdir /home
		if ! mount /dev/gpt/${gpthome} /home; then
			errandout "Error: Couldn't create partition."
		fi
		mkdir /home/nomad
		chown nomad:nomad /home/nomad
		printf "/dev/gpt/${gpthome}\t/home\t\t\tufs\trw,noatime\t1 1\n" >> \
		/etc/fstab
	fi
	mkdir /home/pkgs
	(cd /home/nomad && tar xf /home.nomad.tgz && chown -R nomad .)
}

swconf()
{
	dialog --title "SOFTWARE" --yesno \
		"\nWould you like to run bsdstats at boot time?" 6 60
	if [ $? -eq 0 ]; then
		sysrc bsdstats_enable="YES"
	else
		sysrc bsdstats_enable="NO"
	fi
}

[ -f $path_nomadcfg ] && exit 0

mainmenu
kbdmap
mkhome
clear
passwd
clear
passwd nomad
setlang
setshell
tzsetup
setxkbdmodel
setxkbdlayout
swconf

while [ true ]; do
	eval $(cat $path_nomadcfg)
	summary 2>$selection
	opt=$(cat $selection)

	case $opt in
	*change*) change 2>$selection ;;
	*)        break ;;
	esac

	case $(cat $selection) in
	Shell)       setshell ;;
	Language)    setlang ;;
	Xkbdmodel)   setxkbdmodel ;;
	Xkbdlayout)  setxkbdlayout ;;
	Timezone)	 tzsetup ;;
	Software)	 swconf ;;
	esac
done
rm -f $selection

pw usermod nomad -L $lang -s $shell

sed -E "s/@XKBDMODEL@/$xkbdmodel/; s/@XKBDLAYOUT@/$xkbdlayout/" < \
    $path_xorg_input_tmpl > $path_xorg_input

sysrc keymap="$xkbdlayout" >/dev/null 2>&1
sysrc gsched_enable=YES >/dev/null 2>&1
service gsched start
dialog --infobox "Creating font cache files ..." 3 40
/usr/local/bin/fc-cache -f
mount -t unionfs -o rw,noatime /home/pkgs /usr/local

