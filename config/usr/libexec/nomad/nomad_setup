#!/bin/sh
# vim: set tabstop=4:

path_installdir="/usr/libexec/nomad"
path_nosetup="/var/db/nomadbsd.nosetup"
selection="/tmp/selection.$$"
path_xorg_input_tmpl=${path_installdir}/input-keyboard.conf.tmpl
path_xorg_input=/usr/local/etc/X11/xorg.conf.d/input-keyboard.conf
fragsize=4096
blksize=$((${fragsize} * 8))
gptroot="nomadroot"
gpthome="nomadhome"

mainmenu() {
	local msg ret

	msg="\n\nBefore you can use NomadBSD, there are some things"
	msg="${msg} to be set up."
	msg="${msg} This menu will guide you through the setup process.\n\n"
	msg="${msg}Ready to proceed?\n"

	dialog --clear --title "SET UP NOMADBSD" --yesno "${msg}" 12 60
	ret=$?
	if [ ${ret} -ne 0 ]; then
		exitmenu "Bummer :("
	fi
	return ${ret}
}

exitmenu() {
	local ret opt

	ret="/tmp/exitmenu.ret"
	while [ true ]; do
		dialog --title "LEAVE" --radiolist "$1" 15 60 3 \
		"Reboot" "Reboot system" off \
		"Shutdown" "Shutdown system" on \
		"Exit" "Exit setup" off >/dev/tty 2>${ret}
		[ $? -ne 0 ] && continue
		opt=$(cat ${ret})
		rm -f ${ret}

		case ${opt} in
		Shutdown)
			shutdown -p now;;
		Exit)
			exit 1;;
		Reboot)
			shutdown -r now;;
		esac
	done
}

errandout() {
	local msg

	msg=$1
	msg="${msg}\n\nI'm afraid I can't continue. Sorry for the inconvenience."
	msg="${msg}\n\nAll I can offer is:\n"
	exitmenu "${msg}"
}

giveup() {
	local ret
	dialog --title "GIVE UP?" --yesno "Exit setup?" 6 60
	ret=$?
	if [ ${ret} -eq 0 ]; then
		exitmenu "Please choose:"
	fi
	return ${ret}
}

str_at() {
	local idx

	idx=$1
	shift
	while [ ${idx} -gt 0 ]; do
		idx=$((idx - 1))
		shift
	done
	echo $1
}

count_args() {
	echo $#
}

summary() {
	local text
	
	text="\n"
	text="${text}Browser:           ${cfg_browser}\n"
	text="${text}BSD-Stats on boot: ${cfg_run_bsdstats}\n"
	text="${text}Editor:            ${cfg_editor}\n"
	text="${text}E-mail client:     ${cfg_email_client}\n"
	text="${text}File manager:      ${cfg_fm}\n"
	text="${text}GELI on /home:     ${cfg_use_geli}\n"
	text="${text}GUI editor:        ${cfg_gui_editor}\n"
	text="${text}Language:          ${cfg_lang}\n"
	text="${text}Shell:             ${cfg_shell}\n"
	text="${text}Timezone:          $(cat /var/db/zoneinfo)\n"
	text="${text}VT Keyboard map:   ${cfg_kbdmap}\n"
	text="${text}Xkbdlayout:        ${cfg_xkbdlayout}\n"
	text="${text}Xkbdmodel:         ${cfg_xkbdmodel}\n"

	dialog --no-items --title "SUMMARY"   \
	       --menu "${text}" -1 -1 2 "I'm happy with it" \
	       "I want to change something"
}

change() {
	local text

	text=""
	text="${text}Browser       ${cfg_browser} "
	text="${text}BSD-Stats     ${cfg_run_bsdstats} "
	text="${text}Editor        ${cfg_editor} "
	text="${text}E-mail_client ${cfg_email_client} "
	text="${text}File_manager  ${cfg_fm} "
	text="${text}GELI_on_home  ${cfg_use_geli} "
	text="${text}GUI_editor    ${cfg_gui_editor} "
	text="${text}Language      ${cfg_lang} "
	text="${text}Root_password ... "
	text="${text}Shell         ${cfg_shell} "
	text="${text}Timezone      $(cat /var/db/zoneinfo) "
	text="${text}User_password ... "
	text="${text}VT_kbdmap     ${cfg_kbdmap} "
	text="${text}Xkbdlayout    ${cfg_xkbdlayout} "
	text="${text}Xkbdmodel     ${cfg_xkbdmodel}"

	dialog --title "CHANGE SETTINGS" --ok-label "Change" \
	       --menu "" -1 60 14 ${text}
}

setlang() {
	local eflags

	if [ $# -gt 0 -a "$1" = "-n" ]; then
		eflags=""
	else
		eflags="--extra-button --extra-label Go_back"
	fi
	list=$(locale -a | grep '.UTF-8'| sort -n | uniq | cut -d. -f 1)
	while [ true ]; do
		dialog ${eflags} --clear \
			   --title "LANGUAGE" --no-items \
		       --menu "\nPlease select your language." \
		       -1 -1 10 ${list} 2>${selection}
		ret=$?; lang=$(cat ${selection})
		rm -f ${selection}
		if [ ${ret} -eq 0 ]; then
			if [ ! -z "${lang}" ]; then
				cfg_lang=${lang}
				return 0
			fi
		else
			return ${ret}
		fi
	done
}

setshell() {
	local i opts eflags ret shell

	if [ $# -gt 0 -a "$1" = "-n" ]; then
		eflags=""
	else
		eflags="--extra-button --extra-label Go_back"
	fi
	for i in `cat /etc/shells | sed '/^\#/d; /^$/d'`; do
		if (echo $i | grep -q '/fish$'); then
			opts="${opts}$i on ";
		else
			opts="${opts}$i off ";
		fi
	done
	while [ true ]; do
		dialog ${eflags} \
			   --clear --title "SHELL" --no-items \
		       --radiolist "\nPlease select your preferred shell." \
		       -1 60 10 ${opts} 2>${selection}
		ret=$?; shell=$(cat ${selection})
		rm -f ${selection}
		if [ ${ret} -eq 0 ]; then
			if [ ! -z "${shell}" ]; then
				cfg_shell=${shell}
				return 0
			fi
		else
			return ${ret}
		fi
	done
}

genlogincfg() {
cat <<GENLOGINCFG_END
me:\\
        :setenv=EDITOR=${cfg_editor}:
GENLOGINCFG_END
}

seteditor() {
	local i opts eflags ret editor

	if [ $# -gt 0 -a "$1" = "-n" ]; then
		eflags=""
	else
		eflags="--extra-button --extra-label Go_back"
	fi
	while [ true ]; do
		dialog ${eflags} \
			   --clear --title "EDITOR" \
		       --radiolist "\nPlease select your preferred editor." \
		       -1 75 5 \
				ee "Easy editor" on \
				vim "Vi IMproved, a programmer's text editor" off \
				vi "Bug-for-bug compatible replacement for 4BSD's vi" off \
				2>${selection}
		ret=$?; editor=$(cat ${selection})
		rm -f ${selection}
		if [ ${ret} -eq 0 ]; then
			if [ ! -z "${editor}" ]; then
				cfg_editor=${editor}
				return 0
			fi
		else
			return ${ret}
		fi
	done
}

setpass() {
	local pwdfile cmdret ret eflags msg

	if [ $# -gt 0 -a "$1" = "-n" ]; then
		eflags=""
		shift
	else
		eflags="--extra-button --extra-label Go_back"
	fi
	pwdfile="/tmp/$1.pwd"
	msg="Set password for user $1\n\n"
	msg="${msg}Use UP and DOWN keys to switch between fields"
	while [ true ]; do
		dialog ${eflags} \
			   --insecure --passwordform "${msg}" \
			12 60 4 "Password" 1 0 "" 2 1 50 0 \
			"Repeat password" 3 0 "" 4 1 50 0 2>${pwdfile}
		ret=$?
		if [ ${ret} -ne 0 ]; then
			return ${ret}
		fi
		p1=$(head -1 ${pwdfile})
		p2=$(tail -1 ${pwdfile})
		rm -f ${pwdfile}
		if [ "${p1}" != "${p2}" ]; then
			dialog --title ERROR --msgbox \
				"\nPasswords do not match." 6 40
		elif [ -z "${p1}" ]; then
			dialog --title ERROR --msgbox \
				"\nPassword must not be empty." 6 40
		else
			break
		fi
	done
	echo "${p1}" | pw usermod $1 -h 0
}

setpass_nomad() {
	setpass $* nomad
}

setpass_root() {
	setpass $* root
}

getlist() {
	baselst="/usr/local/share/X11/xkb/rules/base.lst"

	re=$(echo -n '^! '$1)
	cat $baselst | awk -v re="${re}" -F " " '{
		if ($0 ~ re) {
			in_model = 1;
		} else if (/^\! /) {
			in_model = 0;
		} else if (/^ /) {
			if (in_model) {
				printf("%s\t", $1);
				for (i = 2; i <= NF; i++) {
					printf("%s", $i);
					if (i < NF)
						printf("_");
				}
				printf("\n");
			}
		}
	}'
}

setkbdmap() {
	local list eflags kmap ret

	if [ $# -gt 0 -a "$1" = "-n" ]; then
		eflags=""
	else
		eflags="--extra-button --extra-label Go_back"
	fi
	list=$(grep -E '^[a-z\.]+\.kbd:en:.*' \
		   /usr/share/vt/keymaps/INDEX.keymaps | \
		   sed -E 's/^([a-z\.]+):en:(.*)$/\1:\2/' | sort -n | \
		   tr ' ' '_' | tr ':' ' ')
	dialog ${eflags} --clear --title "KEYBOARD MODEL" \
		   --menu "\nPlease select your keyboard model.\n" \
		   -1 60 8 ${list} 2>${selection}
	ret=$?; kmap=$(cat ${selection})
	rm -f $selection
	if [ ${ret} -eq 0 ]; then
		cfg_kbdmap=${kmap}
		kbdcontrol -l ${kmap}
	fi

	return ${ret}
}

setxkbdmodel() {
	local eflags ret model models

	if [ $# -gt 0 -a "$1" = "-n" ]; then
		eflags=""
	else
		eflags="--extra-button --extra-label Go_back"
	fi
	models=$(getlist "model" | sort -n)
	while [ true ]; do
		dialog ${eflags} --clear --title "KEYBOARD MODEL" \
		       --menu "\nPlease select your keyboard model.\n" \
		       -1 60 8 ${models} 2>${selection}
		ret=$?; model=$(cat ${selection})
		rm -f ${selection}
		if [ $ret -eq 0 ]; then
			cfg_xkbdmodel=${model}
			return 0
		else
			return ${ret}
		fi
	done
}

setxkbdlayout() {
	local eflags

	if [ $# -gt 0 -a "$1" = "-n" ]; then
		eflags=""
	else
		eflags="--extra-button --extra-label Go_back"
	fi
	layouts=$(getlist "layout" | sort -n)
	while [ true ]; do
		dialog ${eflags} --clear --title "KEYBOARD LAYOUT" \
		       --menu "\nPlease select your keyboard layout.\n" \
	               -1 60 8 $layouts 2>${selection}
		ret=$?; layout=$(cat ${selection})
		rm -f ${selection}
		if [ ${ret} -eq 0 ]; then
			cfg_xkbdlayout=${layout}
			return 0
		else
			return ${ret}
		fi
	done
}

gelimenu() {
	local pwdfile cmdret ret eflags msg

	if [ $# -gt 0 -a "$1" = "-n" ]; then
		eflags=""
	else
		eflags="--extra-button --extra-label Go_back"
	fi
	pwdfile="/tmp/geli.pwd"
	msg="Enter a password for geli volume\n\n"
	msg="${msg}Use UP and DOWN keys to switch between fields"

	while [ true ]; do
		dialog ${eflags} --insecure --passwordform "${msg}" \
			12 60 4 "Password" 1 0 "" 2 1 50 0 \
			"Repeat password" 3 0 "" 4 1 50 0 2>${pwdfile}
		ret=$?
		if [ ${ret} -ne 0 ]; then
			return ${ret}
		fi
		p1=$(head -1 ${pwdfile})
		p2=$(tail -1 ${pwdfile})
		rm -f ${pwdfile}
		if [ "${p1}" != "${p2}" ]; then
			dialog --title ERROR --msgbox \
				"\nPasswords do not match." 6 40
		elif [ -z "${p1}" ]; then
			dialog --title ERROR --msgbox \
				"\nPassword must not be empty." 6 40
		else
			break
		fi
	done
	cfg_gelipwd=${p1}

	return 0
}

mkhomepart() {
	local dev rootdev

	rootdev=$(glabel status | grep ${gptroot} | awk -F" " '{ print $3 }')
	if [ -z "${rootdev}" ]; then
		errandout "Error: Failed find root device."
	fi
	dev=$(echo ${rootdev} | sed -E 's/(.*)p[0-9]/\1/')

	if (glabel status | grep "gpt/${gpthome}"); then
		errandout "Error: gpt/${gpthome} already exists."
	fi
	gpart recover ${dev}
	gpart set -a lenovofix ${dev}
	if ! gpart add -t freebsd-ufs -l ${gpthome} ${dev}; then
		errandout "Error: Couldn't create partition."
	fi
}

mkgeli() {
	local pwdfile cmdret

	mkhomepart
	cmdret="/tmp/mkgeli_cmds.ret"
	dd if=/dev/random of=/root/${gpthome}.key bs=64 count=1 > /dev/null 2>&1
	(echo "${cfg_gelipwd}" | geli init -s 4096 -K /root/${gpthome}.key -J - \
		/dev/gpt/${gpthome} 2>&1; echo $?>${cmdret}) | dialog --progressbox \
		20 75
	if [ "$(cat ${cmdret})" -ne 0 ]; then
		errandout "Error: Failed to init geli volume."
	fi
	(echo "${cfg_gelipwd}" | geli attach -k /root/${gpthome}.key -j - \
		/dev/gpt/${gpthome} 2>&1; echo $?>${cmdret}) | dialog --progressbox \
		20 75
	if [ "$(cat ${cmdret})" -ne 0 ]; then
		errandout "Error: Failed to attach geli volume."
	fi
	(newfs -E -U -O 1 -o time -b ${blksize} -f ${fragsize} \
		-m 8 /dev/gpt/${gpthome}.eli 2>&1; echo $?>${cmdret}) | \
		dialog --progressbox 20 75
	if [ "$(cat ${cmdret})" -ne 0 ]; then
		errandout "Error: Failed to create filesystem."
	fi
	rm -f ${cmdret}
	mkdir /private > /dev/null 2>&1 || \
		errandout "Error: Failed to create /private"
	if ! mount /dev/gpt/${gpthome}.eli /private; then
		errandout "Error: Failed to mount filesystem."
	fi
	mkdir /private/home || errandout "Error: Failed to create /private/home"
	mkdir /private/etc  || errandout "Error: Failed to create /private/etc"
	mkdir /private/home/nomad || \
		errandout "Error: Failed to create /private/home/nomad"
	unlink /home >/dev/null 2>&1
	ln -s /private/home /home || \
		errandout "Error: Failed to create symlink /home -> /private/home"
	chown nomad:nomad /home/nomad
	# Protect plain text passwords from ppp.conf and wpa_supplicant.conf
	mv /etc/ppp /private/etc/
	mv /etc/wpa_supplicant.conf /private/etc >/dev/null 2>&1
	touch /private/etc/wpa_supplicant.conf
	(cd /etc && ln -sf /private/etc/ppp; ln -sf /private/etc/wpa_supplicant.conf)
	sysrc geli_devices="gpt/${gpthome}" > /dev/null 2>&1
	sysrc geli_gpt_${gpthome}_flags="-k /root/${gpthome}.key" > /dev/null 2>&1
	printf "/dev/gpt/${gpthome}.eli\t/private\t\t\tufs\trw,noatime\t1 1\n" >> \
		/etc/fstab
}

mkhome() {
	local cmdret

	cmdret="/tmp/mkhome_newfs.ret"
	if [ ${cfg_use_geli} = "Yes" ]; then
		mkgeli
	else
		mkhomepart
		(newfs -E -U -O 1 -o time -b ${blksize} -f ${fragsize} \
			-m 8 /dev/gpt/${gpthome} 2>&1; echo $?>${cmdret}) | \
			dialog --progressbox 20 75
		if [ "`cat ${cmdret}`" -ne 0 ]; then
			errandout "Error: Couldn't create partition."
		fi
		rm -f ${cmdret}
		mkdir /home
		if ! mount /dev/gpt/${gpthome} /home; then
			errandout "Error: Couldn't create partition."
		fi
		mkdir /home/nomad
		chown nomad:nomad /home/nomad
		printf "/dev/gpt/${gpthome}\t/home\t\t\tufs\trw,noatime\t1 1\n" >> \
		/etc/fstab
	fi
	mkdir /home/pkgs
	(cd /home/nomad && tar xf /home.nomad.tgz && chown -R nomad .)
}

homepart_menu() {
	local cmdret home ret eflags

	if [ $# -gt 0 -a "$1" = "-n" ]; then
		eflags=""
	else
		eflags="--extra-button --extra-label Go_back"
	fi
	cmdret="/tmp/homepart_menu.ret"
	while [ true ]; do
		dialog ${eflags} \
			   --checklist "CONFIGURE /home" 8 50 1 \
			   "GELI" "Encrypt /home using geli" off 2>${cmdret}
		ret=$?
		cfg_use_geli="No"
		if [ ${ret} -eq 0 ]; then
			if [ "$(cat ${cmdret})" = "GELI" ]; then
				gelimenu
				ret=$?
				if [ ${ret} -eq 3 ]; then
					continue
				elif [ ${ret} -eq 0 ]; then
					cfg_use_geli="Yes"
					return 0
				fi
				return ${ret}
			fi
		fi
		return ${ret}
	done
}

desktopsettings()
{
	appsdir="/usr/local/share/applications"
	desktop="/home/nomad/Desktop"
	mimelist="/home/nomad/.local/share/applications/mimeapps.list"
	dsbmc_cfg="/home/nomad/.config/DSB/dsbmc/config"
	autostart="/home/nomad/.config/DSB/autostart.sh"
	xinitrc="/home/nomad/.xinitrc"

	genlogincfg >> /root/.login_conf
	genlogincfg >> /home/nomad/.login_conf
	awk -v line="export EDITOR=${cfg_editor}" '{
		if (/#!/) { print $0; print line } else print $0;
	}' ${xinitrc} >> ${xinitrc}.tmp
	mv ${xinitrc}.tmp ${xinitrc}

	mkdir ${desktop} 2>/dev/null

	# Create icons for browser, e-mail client and terminal on desktop
	cp ${appsdir}/${cfg_browser}.desktop ${desktop}
	cp ${appsdir}/${cfg_email_client}.desktop ${desktop}
	cp ${appsdir}/sakura.desktop ${desktop}
	sed -i .bak -E "s/BROWSER/${cfg_browser}.desktop/g" ${mimelist}
	sed -i .bak -E "s/FILEMANAGER/${cfg_fm}.desktop/g" ${mimelist}
	sed -i .bak -E "s/EMAILCLIENT/${cfg_email_client}.desktop/g" ${mimelist}
	rm -f ${mimelist}.bak 2>/dev/null

	# Set file manager in dsbmc
	sed -i .bak -E "s/FILEMANAGER/${cfg_fm}/g" ${dsbmc_cfg}
	rm -f ${dsbmc_cfg}.bak 2>/dev/null

	# set panel and desktop
	if [ "${cfg_desktop}" = "Yes" ]; then
		sed -i .bak -E 's/DESKTOP/pcmanfm --desktop\&/' ${autostart}
	else
		sed -i .bak -E '/DESKTOP/d' ${autostart}
	fi
	sed -i .bak -E "s/PANEL/${cfg_panel}/g" ${autostart}
	rm -f ${autostart}.bak 2>/dev/null

	# Activate compton
	if [ "${cfg_compton}" = "Yes" ]; then
		echo 'compton&' >> ${autostart}
	fi

	# Update Openbox menu
	su -l nomad -c '/usr/bin/update_obmenu -u' >/dev/null 2>&1

	# Create localized XDG standard dirs.
	su -l nomad -c '/usr/local/bin/xdg-user-dirs-update' >/dev/null 2>&1
}

setbsdstats()
{
	local cmdret ret eflags

	if [ $# -gt 0 -a "$1" = "-n" ]; then
			eflags=""
		else
			eflags="--extra-button --extra-label Go_back"
	fi
	cmdret="/tmp/setbsdstats.ret"
	dialog ${eflags} \
		   --checklist "BSDSTATS" 8 60 1 \
		   "BSDSTATS" "Run bsdstats at boot time" off 2>${cmdret}
	ret=$?
	cfg_run_bsdstats="No"
	if [ $? -eq 0 ]; then
		[ "$(cat ${cmdret})" = "BSDSTATS" ] && cfg_run_bsdstats="Yes"
	fi
	rm -f ${cmdret}
	return ${ret}
}

setdesktop()
{
	local cmdret ret eflags

	if [ $# -gt 0 -a "$1" = "-n" ]; then
			eflags=""
		else
			eflags="--extra-button --extra-label Go_back"
	fi
	cmdret="/tmp/setdesktop.ret"
	dialog ${eflags} \
		   --checklist "DESKTOP" 8 65 1 \
		   "Desktop" "Create desktop using pcmanfm" off 2>${cmdret}
	ret=$?
	cfg_desktop="No"
	if [ $? -eq 0 ]; then
		[ "$(cat ${cmdret})" = "Desktop" ] && cfg_desktop="Yes"
	fi
	rm -f ${cmdret}
	return ${ret}
}

setpanel()
{
	local cmdret ret eflags

	if [ $# -gt 0 -a "$1" = "-n" ]; then
			eflags=""
		else
			eflags="--extra-button --extra-label Go_back"
	fi
	cmdret="/tmp/setpanel.ret"
	dialog ${eflags} \
			--radiolist "Choose your preferred panel" 10 75 3 \
			lxpanel "Lightweight X11 desktop panel" off \
			tint2 "Lightweight freedesktop-compliant panel/taskbar/systray/clock" on 2>${cmdret}
	ret=$?
	cfg_panel="$(cat ${cmdret})"
	rm -f ${cmdret}
	return ${ret}
}

setfm()
{
	local cmdret ret eflags

	if [ $# -gt 0 -a "$1" = "-n" ]; then
			eflags=""
		else
			eflags="--extra-button --extra-label Go_back"
	fi
	cmdret="/tmp/fmconf.ret"
	dialog ${eflags} \
			--radiolist "Choose your preferred file manager" 10 75 3 \
			Thunar "Xfce file manager" on \
			pcmanfm "PCMan file manager" off 2>${cmdret}
	ret=$?
	cfg_fm="$(cat ${cmdret})"
	rm -f ${cmdret}
	return ${ret}
}

setbrowser()
{
	local cmdret ret eflags

	if [ $# -gt 0 -a "$1" = "-n" ]; then
			eflags=""
		else
			eflags="--extra-button --extra-label Go_back"
	fi
	cmdret="/tmp/setbrowser.ret"
	dialog ${eflags} \
			--radiolist "Choose your preferred browser" 10 75 3 \
			firefox  "Web browser based on the browser portion of Mozilla" on \
			palemoon "Open Source Goanna-based web browser" off 2>${cmdret}
	ret=$?
	cfg_browser="$(cat ${cmdret})"
	rm -f ${cmdret}
	return ${ret}
}

setemailclient()
{
	local cmdret ret eflags

	if [ $# -gt 0 -a "$1" = "-n" ]; then
			eflags=""
		else
			eflags="--extra-button --extra-label Go_back"
	fi
	cmdret="/tmp/setemailclient.ret"
	dialog ${eflags} \
			--radiolist "Choose your preferred e-mail client" 10 75 3 \
			sylpheed \
		      "Lightweight, featureful, and fast GTK+ based e-mail client" on \
			thunderbird \
			  "Mozilla Thunderbird is standalone mail and news" off 2>${cmdret}
	ret=$?
	cfg_email_client="$(cat ${cmdret})"
	rm -f ${cmdret}
	return ${ret}
}

seteyecandy()
{
	local cmdret ret eflags

	if [ $# -gt 0 -a "$1" = "-n" ]; then
			eflags=""
		else
			eflags="--extra-button --extra-label Go_back"
	fi
	cmdret="/tmp/seteyecandy.ret"
	dialog ${eflags} \
		   --checklist "EYE CANDY" 8 65 1 \
		   "Compton" "Use compton for desktop effects" on 2>${cmdret}
	ret=$?
	cfg_compton="No"
	if [ $? -eq 0 ]; then
		[ "$(cat ${cmdret})" = "Compton" ] && cfg_compton="Yes"
	fi
	rm -f ${cmdret}
	return ${ret}
}

menus="mainmenu tzsetup setkbdmap setlang setpass_root setpass_nomad"
menus="${menus} setshell homepart_menu setxkbdmodel setxkbdlayout setbsdstats"
menus="${menus} seteditor setdesktop setpanel setfm setbrowser setemailclient"
menus="${menus} seteyecandy"

n=$(count_args ${menus})
j=0
while [ $j -lt $n ]; do
	m=$(str_at $j ${menus})
	eval $m
	ret=$?
	if [ ${ret} -eq 3 ]; then
		j=$(($j - 1))
	elif [ ${ret} -eq 0 ]; then
		j=$(($j + 1))
	else
		giveup
	fi
done

while [ true ]; do
	summary 2>${selection}
	if [ $? -ne 0 ]; then
		giveup
		continue
	fi
	opt=$(cat ${selection})

	case $opt in
	*change*) change 2>${selection} ;;
	*)        break ;;
	esac
	case $(cat ${selection}) in
	Shell)         setshell -n ;;
	Language)      setlang -n ;;
	Xkbdmodel)     setxkbdmodel -n ;;
	Xkbdlayout)    setxkbdlayout -n ;;
	VT_kbdmap)	   setkbdmap -n ;;
	Timezone)	   tzsetup ;;
	BSD-Stats)	   setbsdstats -n ;;
	GELI_on_home)  homepart_menu -n ;;
	Editor)		   seteditor -n ;;
	Desktop)	   setdesktop -n ;;
	Panel)		   setpanel -n ;;
	File_manager)  setfm -n ;;
	Browser)       setbrowser -n ;;
	E-mail_client) setemailclient -n ;;
	Root_password) setpass_root -n ;;
	User_password) setpass_nomad -n ;;
	Eye_candy)	   seteyecandy -n ;;
esac
done
rm -f ${selection}

mkhome

pw usermod nomad -L ${cfg_lang} -s ${cfg_shell}

desktopsettings

sed -E "s/@XKBDMODEL@/${cfg_xkbdmodel}/; s/@XKBDLAYOUT@/${cfg_xkbdlayout}/" < \
    $path_xorg_input_tmpl > $path_xorg_input

sysrc keymap="${cfg_kbdmap%.kbd}" >/dev/null 2>&1
if [ ${cfg_run_bsdstats} = "Yes" ]; then
	sysrc bsdstats_enable=YES >/dev/null 2>&1
else
	sysrc bsdstats_enable=NO >/dev/null 2>&1
fi

sysrc gsched_enable=YES >/dev/null 2>&1
sysrc slim_enable=YES >/dev/null 2>&1
sysrc update_motd=NO >/dev/null 2>&1

# Disable auto-login on ttyv0
sed -i .bak 's/autologin/Pc/' /etc/ttys

cp /usr/share/skel/dot.login /root/.login
dialog --infobox "Creating font cache files.\n\nThis will take a while ..." \
	5 40
/usr/local/bin/fc-cache -f
dialog --infobox "\nRebooting ...\n" 5 40
sleep 5
shutdown -r now

