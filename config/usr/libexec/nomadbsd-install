#!/bin/sh
#
# Copyright (c) 2019 The NomadBSD Project. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# vim: set tabstop=4:

arch=$(sysctl -n hw.machine_arch)
version=$(cat /VERSION)
idx=0
rootfs_label="nbsdrootfs"
swap_label="nbsdswap"
[ -z "${version}" ] && bail "NomadBSD version not set. Check /VERSION"
POOL="zroot"
NOMADBSDROOT="${POOL}/ROOT/nomadbsd-${version}"

bail() {
	echo "nomadbsd-install: $1" >&2
	exit 1
}

status() {
	echo "!$1"
	[ -n "${dummy}" ] && sleep 5
}

progress() {
	echo "%$1"
	[ -n "${dummy}" ] && sleep 1
}

fstab_ufs() {
cat <<FSTAB_END
/dev/gpt/${rootfs_label} /    ufs   rw,noatime   1 1
tmpfs                    /tmp tmpfs rw,mode=1777 0 0
FSTAB_END
}

fstab_zfs() {
cat <<FSTAB_END
tmpfs                    /tmp tmpfs rw,mode=1777,late 0 0
FSTAB_END
}

getrootdev()
{
	local rootdev
	rootdev=$(df / | tail -n 1 | awk '{sub("/dev/", "", $1); print $1 }')
	[ "${rootdev}" != "label/nomadroot" ] && return
	rootdev=$(glabel status | grep nomadroot | awk -F" " '{ print $3 }')
	echo "${rootdev}" | sed -E 's/(.*)s[0-9][a-z]/\1/'
}

devlist() {
	local rootdev=$(getrootdev)
	local list=$(camcontrol devlist | awk -F " " '{
		split($0, a, "[<>]"); descr = a[2];
		n = split($NF, a, "[,()]");
		for (i = 2; i <= n; i++) {
			if (a[i] ~ /(ada|da)[0-9]/) {
				printf("%s|%s\n", a[i], descr);
			}
		}
	}';
		nvmecontrol devlist | awk '/^[ \t]*nvme[0-9]:/ {
			n = split($0, a, ":");
			sub(/^[ \t]*nvme/, "nvd", a[1]);
			sub(/^[ \t]*/, "", a[2]);
			printf("%s|%s\n", a[1], a[2]);
		}'
	)
	if [ -n "${rootdev}" ]; then
		echo "$list" | grep -v "^${rootdev}"
	else
		echo "$list"
	fi
}

newfswrp() {
	fifo="/tmp/newfs.fifo"
	[ ! -f "${fifo}" ] && rm -f "${fifo}"
	mkfifo "${fifo}"
	$1 > "${fifo}"&
	pid=$!
	echo "%0"
	cat "${fifo}" | awk '{
		while (getline > 0) {
			if ($0 ~ /^\tusing.*/) {
				n = split($0, a, " ");
				if (n < 2 || a[2] <= 0) {
					print "ERROR" | "cat >&2"
					exit(1);
				}
				ngroups = a[2];
			} else if ($0 ~ /^super-block backups.*at:$/) {
				RS=" ";
				getblocks = 1;
			} else if (getblocks == 1) {
				if ($0 !~ /^[0-9]+/)
					continue;
				p = int(++gc * 100 / ngroups);
				print "%" p;
				fflush();
			}
		}
	}'
	wait $pid
	retval=$?
	rm -f "${fifo}"
	[ $retval -ne 0 ] && bail "Command '$1' failed"
}

mkufs() {
	status "Creating UFS filesystem ..."
	newfswrp "newfs -t -U $1"
	status "Mounting /dev/${disk}p$idx on /mnt ..."
	mount /dev/${disk}p${idx} /mnt || \
		bail "Failed to mount /dev/${disk}p${idx}"
}

zfs_create() {
	eval dataset=\${$#}
	zfs create $* || bail "Couldn't create dataset/filesystem ${dataset}"
}

mkzfs() {
	zpool create -o altroot=/mnt -m none -f ${POOL} $1 || \
		bail "Couldn't create pool ${POOL}"
	zfs set compress=on ${POOL}
	zfs set atime=off ${POOL}
	zfs_create -o mountpoint=none ${POOL}/ROOT
	zfs_create -o mountpoint=/ ${NOMADBSDROOT}
	zfs_create -o mountpoint=/usr ${NOMADBSDROOT}/usr
	zfs_create ${NOMADBSDROOT}/home
	zfs_create -o mountpoint=/var ${NOMADBSDROOT}/var
	zfs_create ${NOMADBSDROOT}/usr/obj
	zfs_create -o mountpoint=/usr/ports -o exec=off -o setuid=off \
		${NOMADBSDROOT}/usr/ports
	zfs_create -o exec=off -o setuid=off -o compression=off \
		${NOMADBSDROOT}/usr/ports/distfiles
	zfs_create -o exec=off -o setuid=off -o compression=off \
		${NOMADBSDROOT}/usr/ports/packages
	zfs_create -o exec=off -o setuid=off ${NOMADBSDROOT}/var/audit
	zfs_create -o exec=off -o setuid=off ${NOMADBSDROOT}/var/crash
	zfs_create -o exec=off -o setuid=off ${NOMADBSDROOT}/var/log
	zfs_create -o atime=on -o exec=off -o setuid=off \
		${NOMADBSDROOT}/var/mail
	zpool set bootfs=${NOMADBSDROOT} zroot
}

set_autologin() {
	path_slim="/mnt/usr/local/etc/slim.conf"
	awk -v user=$username -v autologin=${autologin:=0} '
		! /^default_user/ && ! /^auto_login/ {
			print $0;
		}
	END {
		if (autologin) {
			printf("default_user%+11s\n", user);
			printf("auto_login%+13s\n", "yes");
		}
	}' < $path_slim > $path_slim.tmp
	mv $path_slim.tmp $path_slim
}

commit() {
	status "Creating GPT partition scheme ..."
	gpart destroy -F ${disk}
	dd if=/dev/zero of=/dev/${disk} count=100
	gpart create -s gpt ${disk} || bail "Couldn't create GPT partition scheme"
	status "Creating boot partition ..."
	gpart add -a 4k -t freebsd-boot -l gpboot -b 40 -s 512K ${disk} || \
		bail "Couldn't create partition"
	idx=$((idx + 1))
	status "Installing boot code ..."
	if [ ${fstype} = "UFS" ]; then
		gpart bootcode -b /boot/pmbr -p /boot/gptboot \
			-i ${idx} ${disk} || bail "Couldn't install boot code"
	else
		gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot \
			-i ${idx} ${disk} || bail "Couldn't install boot code"
	fi
	if [ "${arch}" = "amd64" ]; then
		status "Creating EFI partition ..."
		gpart add -a 4k -t efi -l gpefiboot -s 800K ${disk} || \
			bail "Couldn't create EFI partition"
		idx=$((idx + 1))
		gpart bootcode -p /boot/boot1.efifat -i ${idx} ${disk}
	fi
	if [ -n "${lenovofix}" ]; then
		status "Setting lenovofix ..."
		gpart set -a lenovofix ${disk}
	fi
	if [ ${swapsize} -gt 0 ]; then
		status "Creating swap partition ..."
		gpart add -a 1m -t freebsd-swap -l ${swap_label} \
			-s ${swapsize}M ${disk} || \
				bail "Couldn't create swap partition"
		idx=$((idx + 1))
	fi
	status "Creating partition for / ..."
	if [ ${fstype} = "UFS" ]; then
		gpart add -a 1m -t freebsd-ufs -l ${rootfs_label} ${disk} || \
			bail "Couldn't create partition"
		idx=$((idx + 1))
		mkufs "/dev/${disk}p${idx}"
	else
		gpart add -a 1m -t freebsd-zfs -l ${rootfs_label} ${disk} || \
			bail "Couldn't create partition"
		idx=$((idx + 1))
		mkzfs "/dev/gpt/${rootfs_label}"
	fi
	status "Counting files to copy ..."
	progress -1
	re="^/(dev/.*|var/run/.*|mnt/.*|uzip.*|home.nomad.tgz|";
	re="${re}nomadbsd-backup.tar.xz|etc/rc.d/mount_uzip|home/pkgs.*)"
	nfiles=$(find / \( -type f -or -type d -or 	 \
			 -type l -or -type p \) 2>/dev/null | \
			 egrep -v "$re" | wc -l | tr -d ' ')
	status "Copying files ..."
	(cd / && tar cf -						\
		--exclude '*/.gvfs'					\
		--exclude '^dev*'					\
		--exclude '^var/run*'				\
		--exclude '^mnt*'					\
		--exclude '^uzip*'					\
		--exclude '^home.nomad.tgz'			\
		--exclude '^nomadbsd-backup.tar.xz'	\
		--exclude '^etc/rc.d/mount_uzip'	\
		--exclude '^home/pkgs*' .) | \
		(cd /mnt && tar xmvf - 2>&1) | awk -v nfiles=$nfiles '{
			while (getline > 0) {
				if ($0 !~ /^x/)
					continue;
				p = int(++n * 100 / nfiles);
				print ">" $0;
				print "%" p;
				fflush();
			}
		}'
	status "Creating /mnt/dev ..."
	mkdir /mnt/dev
	status "Creating /mnt/var/run ..."
	mkdir /mnt/var/run
	status "Replacing /mnt/usr/local/etc by /mnt/usr.local.etc ..."
	unlink /mnt/usr/local/etc
	mv /mnt/usr.local.etc /mnt/usr/local/etc
	status "Creating /mnt/mnt ..."
	mkdir /mnt/mnt

	status "Writing fstab ..."
	if [ ${fstype} = "UFS" ]; then
		fstab_ufs > /mnt/etc/fstab
	else
		fstab_zfs > /mnt/etc/fstab
	fi
	if [ ${swapsize} -gt 0 ]; then
		status "Adding swap entry to fstab ..."
		printf "%s\tswap\tswap\tsw\t0\t0\n" "/dev/gpt/${swap_label}" \
			>> /mnt/etc/fstab
	fi
	if [ ${fstype} = "ZFS" ]; then
		echo zfs_load=\"YES\" >> /mnt/boot/loader.conf
		echo vfs.root.mountfrom=\"zfs:${NOMADBSDROOT}\" \
			>> /mnt/boot/loader.conf
	fi
	status "Changing username ..."
	sed -i .bak -E "s/[[:<:]]nomad[[:>:]]/${username}/g" /mnt/etc/master.passwd
	sed -i .bak -E "s/[[:<:]]nomad[[:>:]]/${username}/g" /mnt/etc/group
	sed -i .bak -E '/^geli.*/d' /mnt/etc/rc.conf
	sysrc -f /mnt/etc/rc.conf -x gsched_enable
	sysrc -f /mnt/etc/rc.conf -x local_startup
	sed -i '' 's,^WorkDir.*,WorkDir /var/db/freebsd-update,' \
		/mnt/etc/freebsd-update.conf
	if [ ${fstype} = "ZFS" ]; then
		sysrc -f /mnt/etc/rc.conf zfs_enable=YES
	fi
	if [ -L /mnt/home -a -d /mnt/private/home/nomad ]; then
		unlink /mnt/home
		mv /mnt/private/home /mnt
		rmdir /mnt/private
	fi
	status "Counting config files ..."
	progress -1
	nfiles=$(find /mnt/home/nomad/ -type f -exec file {} \; | grep text | wc -l)

	status "Replacing nomad by ${username} in config files ..."
	find /mnt/home/nomad/ -type f | while read i; do
		if (file "$i" | grep -q text); then
			n=$(($n + 1))
			p=$(($n * 100 / $nfiles))
			progress $p
			sed -i '' -E "s/[[:<:]]nomad[[:>:]]/${username}/g" "$i"
		fi
	done
	rm -rf /mnt/home/nomad/.config/DSB/dsblogoutmgr
	rm -f /mnt/usr/libexec/nomad*
	rm -f /mnt/usr/local/share/applications/nomadbsd-install-gui.desktop
	status "Moving /mnt/home/nomad to /mnt/home/$username ..."
	mv /mnt/home/nomad /mnt/home/${username}
	status "Running pwd_mkdb on /etc/master.passwd ..."
	chroot /mnt sh -c '/usr/sbin/pwd_mkdb -p /etc/master.passwd'
	set_autologin
	status "Unmounting /mnt ..."
	if [ ${fstype} = "ZFS" ]; then
		zfs umount -af
	else
		umount /mnt
	fi
	status "Done!"
}

dummy_commit() {
	status "Creating GPT partition scheme ..."
	status "Creating boot partition ..."
	status "Installing boot code ..."
	status "Creating EFI partition ..."
	[ -n "${lenovofix}" ] && status "Setting lenovofix ..."
	status "Creating swap partition ..."
	status "Creating partition for / ..."
	status "Creating UFS filesystem ..."
	status "Mounting /dev/${disk}p$idx on /mnt ..."
	status "Copying files ..."
	status "Replacing /mnt/usr/local/etc by /mnt/usr.local.etc ..."
	status "Creating /mnt/mnt ..."
	status "Writing fstab ..."
	status "Adding swap entry to fstab ..."
	status "Changing username ..."
	status "Replacing nomad by $username in config files ..."
	status "Moving /mnt/home/nomad to /mnt/home/${username} ..."
	status "Running pwd_mkdb on /etc/master.passwd ..."
	status "Unmounting /mnt ..."
	status "Done!"
}

usage() {
	echo "Usage: $(basename "$0") devlist"
	echo "       $(basename "$0") commit [-n] -u user -f fs -s swap -d dev"
	echo "Options"
	echo "-n     Dummy mode. Do not write anything to disk."
	echo "-d     Define target disk."
	echo "-f     Define filesystem type. Possible values: UFS or ZFS"
	echo "-s     Define size of the swap partition in MB. If set to 0,"
	echo "       no swap partition will be created."
	echo "-u     Define the username to replace nomad."
	echo "-l     Set lenovofix."
	echo "-a     Auto-login user (Slim)."
	exit 1
}

[ $# -lt 1 ] && usage
case $1 in
-*)
	usage
	;;
esac

if [ $1 = "devlist" ]; then
	devlist
elif [ $1 = "commit" ]; then
	shift
	while [ $# -gt 0 ]; do
		case $1 in
		-n)
			dummy=1
			;;
		-u)
			username=$2
			shift
			;;
		-s)
			swapsize=$2
			shift
			;;
		-d)
			disk=$2
			shift
			;;
		-l)
			lenovofix=1
			;;
		-f)
			fstype=$2
			if [ $fstype != "UFS" -a $fstype != "ZFS" ]; then
				bail "Unknown filesystem type '$fstype'"
			fi
			shift
			;;
		-a)
			autologin=1
			;;
		-*)
			usage
			;;
		esac
		shift
	done
	[ -z "$username" ] && bail "Username not defined"
	[ -z "$swapsize" ] && bail "Swap size not defined"
	[ -z "$disk"     ] && bail "Target device not defined"
	[ -z "$fstype"   ] && bail "Filesystem type not defined"
	if [ -n "$dummy" ]; then
		dummy_commit
	else
		commit
	fi
else
	bail "Unknown command '$1'"
fi
exit 0
